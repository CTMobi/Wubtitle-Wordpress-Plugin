language: php


notifications:
  email:
    on_success: never
    on_failure: change


services:
  - mysql

cache:
  apt: true
  directories:
    - $HOME/.composer/cache
    - node_modules
addons:
  apt:
    packages:
        - aspell
        - aspell-en
        - aspell-it

# Explicitly test against supported versions of PHP
#
# Reference: https://www.php.net/supported-versions.php
php:
  # - 7.4
  - 7.3
  # - 7.2


# Test against the latest version of WordPress and one version back.
env:
  # - WP_VERSION=latest
  # - WP_VERSION=5.4
  - WP_VERSION=5.3

# Customize the build matrix.
matrix:
  fast_finish: true
  exclude:
    - php: 7.4
      env: WP_VERSION=5.3

  include:
    # Nightly versions of PHP and WordPress.
    - name: Bleeding edge
      php: 7.4
      env: WP_VERSION=trunk

  # Jobs that are permitted to fail without breaking the build
  allow_failures:
    - name: Bleeding edge

before_install:
  - nvm install 'lts/*'
  - export PATH="$HOME/.composer/vendor/bin:$PATH"

  # Unless we need XDebug, disable it for improved performance.
  #- phpenv config-rm xdebug.ini || return 0

install:
  # Install our Composer dependencies
  - composer install --prefer-dist --no-interaction
  - ./vendor/bin/phpcs --config-set standard ./phpcs.xml.dist

  - npm ci --prefer-offline --progress=false

  # Install the WordPress core test suite
  - bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION

script:
  # Check spelling
  - bash bin/check-spelling.sh
  # Search for PHP syntax errors.
  - find -L . -path ./vendor -prune -o -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l
  - composer test
  - bash <(curl -Ls https://coverage.codacy.com/get.sh) || return 0
  - composer check-php
  - npm run lint:js:src
  - npm run csslint
  - npm run build
